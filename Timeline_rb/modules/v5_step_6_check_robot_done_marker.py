from timeline_rb_v4_3_1 import generate_timeline_rb_v4_3
from module_luong_core_v1_2 import extract_timer_positions_corrected

import re

def extract_user_defined_timers_from_route_steps(route_steps: list[str]) -> dict[str, int]:
    """
    Tr√≠ch xu·∫•t timer t·ª´ c√°c b∆∞·ªõc c√≥ ƒë·ªãnh d·∫°ng (V·ªã tr√≠ XX: timer(YY))
    - Ch·ªâ l·∫•y nh·ªØng timer c√≥ ch·ª©a s·ªë.
    - B·ªè qua marker timer kh√¥ng c√≥ s·ªë.
    """
    timer_dict = {}

    for step in route_steps:
        # Ch·ªâ l·∫•y timer c√≥ s·ªë c·ª• th·ªÉ
        match = re.search(r"\(V·ªã tr√≠\s+(\w+):\s*timer\((\d+)\)", step, re.IGNORECASE)
        if match:
            position = match.group(1).upper()
            timer_val = int(match.group(2))
            timer_dict[position] = timer_val
        # B·ªè qua marker timer kh√¥ng c√≥ s·ªë, kh√¥ng raise n·ªØa
    return timer_dict


def check_robot_done_and_generate_v4(
    robot: str,
    processed_markers_by_robot: dict,
    markers_by_robot: dict,
    route_steps_by_robot: dict,
    base_timer_dict: dict = None,
    start_time: int = 0
):

    # ‚úÖ Ghi log robot ƒë∆∞·ª£c x·ª≠ l√Ω t·∫°i Step6
    with open("log_step6_robot.txt", "a", encoding="utf-8") as f:
        f.write(f"[STEP6] ƒêang x·ª≠ l√Ω robot: {robot}\n")

    """
    ‚úÖ Step 6 m·ªü r·ªông:
    - Ki·ªÉm tra robot ƒë√£ x·ª≠ l√Ω xong marker ch∆∞a.
    - N·∫øu xong, g·ªçi V4 ƒë·ªÉ t√≠nh timeline ri√™ng cho robot ƒë√≥.

    Tr·∫£ v·ªÅ:
        - None n·∫øu robot ch∆∞a x·ª≠ l√Ω xong
        - timeline_df n·∫øu ƒë√£ x·ª≠ l√Ω xong v√† V4 ƒë∆∞·ª£c g·ªçi
    """
    # Ki·ªÉm tra robot ƒë√£ x·ª≠ l√Ω xong marker ch∆∞a
    expected = [m["marker_text"] for m in markers_by_robot.get(robot, [])]
    actual = [m["marker_text"] for m in processed_markers_by_robot.get(robot, [])]
    if set(actual) != set(expected):
        return None  # ch∆∞a xong

    # N·∫øu ƒë√£ x·ª≠ l√Ω xong, g·ªçi V4 ƒë·ªÉ t√≠nh timeline
    route_steps = route_steps_by_robot[robot]
    timer_positions = extract_timer_positions_corrected(route_steps)
    user_defined_timers_from_route = extract_user_defined_timers_from_route_steps(route_steps)
    print(f"[LOG] üîç Timer t·ª´ route ({robot}):", user_defined_timers_from_route)
    user_defined_timers = base_timer_dict.copy()
    print(f"[LOG] üìã Timer g·ªëc t·ª´ base_timer_dict ({robot}):", user_defined_timers)
    user_defined_timers.update(user_defined_timers_from_route)
    print(f"[LOG] ‚úÖ Timer sau khi g·ªôp ({robot}):", user_defined_timers)

    timeline_df = generate_timeline_rb_v4_3(
        robot_name=robot,
        route_steps=route_steps,
        timer_positions=timer_positions,
        user_defined_timers=user_defined_timers,
        start_time=start_time
    )
    timeline_df["robot"] = robot

    with open("log_timeline_df_sttep6.txt", "a", encoding="utf-8") as f:
        f.write(f"üßæ Timeline V4 cho robot {robot}:\n")
        f.write(timeline_df.to_string(index=False))
        f.write("\n" + "="*60 + "\n\n")

    return timeline_df

def check_all_robot_done_marker(processed_markers_by_robot: dict, markers_by_robot: dict) -> bool:
    """
    ‚úÖ H√†m b·ªï sung cho step 6 ‚Äì Ki·ªÉm tra to√†n b·ªô robot ƒë√£ x·ª≠ l√Ω xong marker hay ch∆∞a.
    
    D√πng trong v√≤ng l·∫∑p (loop), thay th·∫ø vi·ªác g·ªçi t·ª´ng robot ri√™ng l·∫ª.
    
    Tr·∫£ v·ªÅ:
        - True n·∫øu t·∫•t c·∫£ robot ƒë√£ x·ª≠ l√Ω xong.
        - False n·∫øu c√≤n √≠t nh·∫•t m·ªôt robot ch∆∞a x·ª≠ l√Ω xong.
    """
    for rb in markers_by_robot:
        full_set = set(marker["marker_text"] for marker in markers_by_robot.get(rb, []))
        done_set = set(m["marker_text"] for m in processed_markers_by_robot.get(rb, []))
        if full_set != done_set:
            return False
    return True
