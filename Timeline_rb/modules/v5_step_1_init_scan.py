from typing import Dict, List, Tuple, Any
import re
import sys
import os, sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
# ‚úÖ ƒê√É S·ª¨A: Th√™m robot_name v√†o l·ªùi g·ªçi generate_timeline_rb_v4_3(rb, ...)

# VERSION: v1.2
# ‚úÖ H·ªó tr·ª£ th·ª© t·ª± marker theo d√≤ng xu·∫•t hi·ªán trong route
# ‚úÖ Tr·∫£ v·ªÅ markers_by_robot c√≥ th·ª© t·ª± logic ch√≠nh x√°c


from module_luong_core_v1_2 import extract_timer_positions_corrected
from timeline_rb_v4_3_1 import generate_timeline_rb_v4_3
from parse_marker_wait_sync import parse_marker_wait_sync

def scan_markers(route_steps_by_robot: Dict[str, List[str]]) -> Tuple[
    Dict[str, List[Dict[str, Any]]],
    Dict[str, List[str]],
    List[str]
]:
    """
    Phi√™n b·∫£n m·ªõi: tr√≠ch xu·∫•t to√†n b·ªô marker ("timer time l∆∞u", "ch·ªù ƒë·ªìng b·ªô") v√†o markers_by_robot

    Returns:
        - markers_by_robot: dict[robot, list[marker_obj]]
        - processed_markers_by_robot: dict[robot, list[str]] (r·ªóng ban ƒë·∫ßu)
        - robots_sach_marker: list[str]
    """
    markers_by_robot = {}
    processed_markers_by_robot = {}
    robots_sach_marker = []

    for rb, steps in route_steps_by_robot.items():
        marker_objs = []

        for step in steps:
            step_lower = step.lower()

            # Case 1: timer time l∆∞u
            if "(v·ªã tr√≠" in step_lower and "timer time l∆∞u" in step_lower:
                match = re.search(r"v·ªã tr√≠\s+(\d+[TD])", step, re.IGNORECASE)
                if match:
                    pos = match.group(1).upper()
                    marker_objs.append({
                        "marker_text": step.strip(),
                        "type": "timer_time_luu",
                        "position": pos,
                        "parsed_data": None
                    })

            # Case 2: ch·ªù ƒë·ªìng b·ªô
            elif "(v·ªã tr√≠" in step_lower and "ch·ªù ƒë·ªìng b·ªô" in step_lower:
                match_pos = re.search(r"v·ªã tr√≠\s+(\d+[TD])", step, re.IGNORECASE)
                if match_pos:
                    pos = match_pos.group(1).upper()
                    parsed = parse_marker_wait_sync(step)
                    if parsed:
                        marker_objs.append({
                            "marker_text": step.strip(),
                            "type": "wait_sync",
                            "position": pos,
                            "parsed_data": parsed
                        })

        if marker_objs:
            markers_by_robot[rb] = marker_objs
            processed_markers_by_robot[rb] = []
        else:
            robots_sach_marker.append(rb)

    print("üìå DEBUG - MARKERS BY ROBOT:")
    for rb, markers in markers_by_robot.items():
        print(f"üîç Robot: {rb}")
        for i, m in enumerate(markers):
            print(f"  [{i}] Pos = {m['position']}, Type = {m['type']}, Marker = {m['marker_text']}")

    return markers_by_robot, processed_markers_by_robot, robots_sach_marker


def handle_clean_robots_v1(robots_sach_marker, route_steps_by_robot, timer_dict):
    """
    V·ªõi c√°c robot kh√¥ng c√≥ marker "timer time l∆∞u", g·ªçi V4.3 ƒë·ªÉ t√≠nh to√†n b·ªô timeline.
    """
    timeline_by_robot = {}
    for rb in robots_sach_marker:
        steps = route_steps_by_robot[rb]
        timer_positions = extract_timer_positions_corrected(steps)
        timeline_by_robot[rb] = generate_timeline_rb_v4_3(
            robot_name=rb,
            route_steps=steps,
            timer_positions=timer_positions,
            move_time=10,
            tdt_time=5,
            user_defined_timers=None
        )
    return timeline_by_robot





def handle_clean_robots(
    robots_sach_marker,
    route_steps_by_robot,
    base_timer_dict=None,
    start_time=0
):
    """
    Phi√™n b·∫£n c·∫£i ti·∫øn h·ªó tr·ª£ truy·ªÅn base_timer_dict ‚Äì d√πng cho pipeline V5

    Args:
        robots_sach_marker (list): danh s√°ch robot kh√¥ng c√≤n marker "timer time l∆∞u"
        route_steps_by_robot (dict): route g·ªëc c·ªßa t·ª´ng robot
        base_timer_dict (dict): dict ch·ª©a c√°c timer c·ªë ƒë·ªãnh (VD: {"2D": 40, "5D": 60, ...})

    Returns:
        timeline_by_robot (dict): timeline ƒë·∫ßy ƒë·ªß c·ªßa c√°c robot s·∫°ch marker
    """
    from timeline_rb_v4_3_1 import generate_timeline_rb_v4_3
    from module_luong_core_v1_2 import extract_timer_positions_corrected

    timeline_by_robot = {}
    for rb in robots_sach_marker:
        route_steps = route_steps_by_robot[rb]
        timer_positions = extract_timer_positions_corrected(route_steps)
        timeline_df = generate_timeline_rb_v4_3(rb, route_steps, timer_positions, user_defined_timers=base_timer_dict, start_time=start_time)
        timeline_df["robot"] = rb
        timeline_by_robot[rb] = timeline_df
    return timeline_by_robot
